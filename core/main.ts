import l·∫•yD·ªØLi·ªáuC·∫•uH√¨nh, { K√ΩHi·ªáuC·∫•uH√¨nh } from './Code%20h%E1%BB%97%20tr%E1%BB%A3/H%C3%A0m%20li%C3%AAn%20quan%20t%E1%BB%9Bi%20c%E1%BA%A5u%20h%C3%ACnh.ts';
import { C√¢uNh·∫≠p } from "./Code%20h%E1%BB%97%20tr%E1%BB%A3/Ki%E1%BB%83u%20cho%20d%E1%BB%AF%20li%E1%BB%87u%20nh%E1%BA%ADp%20v%C3%A0o.ts";
import { V·∫≠tTh·ªÉK·∫øtQu·∫£ } from "./Code%20h%E1%BB%97%20tr%E1%BB%A3/Ki%E1%BB%83u%20cho%20vi%E1%BB%87c%20x%E1%BB%AD%20l%C3%BD.ts";
import t·∫°oK·∫øtQu·∫£ from './4.%20T%E1%BA%A1o%20k%E1%BA%BFt%20qu%E1%BA%A3/4.1%20T%E1%BA%A1o%20k%E1%BA%BFt%20qu%E1%BA%A3.ts'
import ƒë·∫©yL√™nFibery from './4.%20T%E1%BA%A1o%20k%E1%BA%BFt%20qu%E1%BA%A3/4.2%20%C4%90%E1%BA%A9y%20l%C3%AAn%20fibery.ts';
import { parse as flagParse } from "https://deno.land/std@0.194.0/flags/mod.ts";
import { stringify } from "https://deno.land/std@0.194.0/yaml/mod.ts";
import { json } from "https://deno.land/std@0.194.0/yaml/schema/json.ts";

const flags = flagParse(Deno.args, {
    boolean: ['json', 'yaml', 'debug', 'json-debug', 'h'],
    string: ['ch'],
    // default: {'ch': 'giao d·ªãch'}
})
let ƒë·ªãnhD·∫°ngK·∫øtQu·∫£ = ''
if (flags.json) { ƒë·ªãnhD·∫°ngK·∫øtQu·∫£ = 'json' }
if (flags.yaml) { ƒë·ªãnhD·∫°ngK·∫øtQu·∫£ = 'yaml' }
if (flags.debug) { ƒë·ªãnhD·∫°ngK·∫øtQu·∫£ = 'debug' }
if (flags['json-debug']) { ƒë·ªãnhD·∫°ngK·∫øtQu·∫£ = 'json-debug' }

if (flags.h) { 
    console.log(`L·ªánh v√≠ d·ª•:\ndeno run --allow-all '.\B X·ª≠ l√Ω d·ªØ li·ªáu v√† ƒë·∫©y l√™n Fibery\main.ts' "b√∫n b√≤ 50k n·ª£n tr·∫£ ch·ª£ @nth @@sdfsd" --ch=gd`)}

function xu·∫•tK·∫øtQu·∫£(
    v·∫≠tTh·ªÉK·∫øtQu·∫£: V·∫≠tTh·ªÉK·∫øtQu·∫£,
    ƒë·ªãnhD·∫°ngK·∫øtQu·∫£: string,
    c√¢uNh·∫≠p = Deno.args[0] as C√¢uNh·∫≠p,
    k√ΩHi·ªáuC·∫•uH√¨nh = flags.ch as K√ΩHi·ªáuC·∫•uH√¨nh) {
    const {debug, ...k·∫øtQu·∫£Hi·ªÉnTh·ªã} = v·∫≠tTh·ªÉK·∫øtQu·∫£ 
    
    if (ƒë·ªãnhD·∫°ngK·∫øtQu·∫£ === 'json') {
        console.log(JSON.stringify(k·∫øtQu·∫£Hi·ªÉnTh·ªã, null, 2))
    } else if (ƒë·ªãnhD·∫°ngK·∫øtQu·∫£ === 'yaml') {
        console.log(stringify(k·∫øtQu·∫£Hi·ªÉnTh·ªã))
    } else if (ƒë·ªãnhD·∫°ngK·∫øtQu·∫£ === 'json-debug') {
        console.log(JSON.stringify(v·∫≠tTh·ªÉK·∫øtQu·∫£, null, 2))
    } else {
        console.log(`%cC√¢u nh·∫≠p: ${c√¢uNh·∫≠p}`, 'color: olive');
        console.log('');
        console.table(k·∫øtQu·∫£Hi·ªÉnTh·ªã);
        // ƒë·∫©yL√™nFibery(c√¢uNh·∫≠p, k√ΩHi·ªáuC·∫•uH√¨nh, k·∫øtQu·∫£Hi·ªÉnTh·ªã) 
        
        console.log('X·ª≠ l√Ω xong c√¢u nh·∫≠p.')
    }

    if (ƒë·ªãnhD·∫°ngK·∫øtQu·∫£ === 'debug') {
        console.log(JSON.stringify(debug.x·ª≠L√ΩChi·ªÅuƒê·∫∑cTh√π, null, 2))
    }
}

async function main(c√¢uNh·∫≠p = Deno.args[0] as C√¢uNh·∫≠p, k√ΩHi·ªáuC·∫•uH√¨nh = flags.ch as K√ΩHi·ªáuC·∫•uH√¨nh) {
    const d·ªØLi·ªáuC·∫•uH√¨nh = (await l·∫•yD·ªØLi·ªáuC·∫•uH√¨nh(k√ΩHi·ªáuC·∫•uH√¨nh)).d·ªØLi·ªáuC·∫•uH√¨nh; 
    return await t·∫°oK·∫øtQu·∫£(c√¢uNh·∫≠p, d·ªØLi·ªáuC·∫•uH√¨nh) 
}

const v·∫≠tTh·ªÉK·∫øtQu·∫£ = await main()
if (v·∫≠tTh·ªÉK·∫øtQu·∫£ !== 'C√¢u nh·∫≠p r·ªóng') xu·∫•tK·∫øtQu·∫£(v·∫≠tTh·ªÉK·∫øtQu·∫£, ƒë·ªãnhD·∫°ngK·∫øtQu·∫£); 
console.log("üöÄ ~ ƒë·ªãnhD·∫°ngK·∫øtQu·∫£:", ƒë·ªãnhD·∫°ngK·∫øtQu·∫£)
export default main

// debugger