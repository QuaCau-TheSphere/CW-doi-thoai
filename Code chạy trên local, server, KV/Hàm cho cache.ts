import { DOMParser, HTMLDocument } from "jsr:@b-fuze/deno-dom";
import { t·∫°oDanhS√°chTh√¥ngTinC·∫•uH√¨nhN∆°iƒêƒÉng } from "./H√†m v√† ki·ªÉu cho c·∫•u h√¨nh.ts";
import { getMetaTags } from "https://deno.land/x/opengraph@v1.0.0/mod.ts";
import { T·∫¨P_TIN_CACHE_HTML, T·∫¨P_TIN_CACHE_URL_CH√çNH_T·∫ÆC } from "./ƒê∆Ø·ªúNG_D·∫™N.ts";
import {
  l·∫•yHTML,
  l·∫•yURLKh√¥ngSlashV√†C√≥Slash,
  l·∫•yURLTrongJSON,
  t·∫°oCorsURL,
  Url,
  UrlCh√≠nhT·∫Øc,
  UrlCh∆∞aCh√≠nhT·∫Øc,
} from "../Code ch·∫°y tr√™n client/URL, HTML/H√†m v√† ki·ªÉu cho URL v√† fetch.ts";
import { load } from "$std/dotenv/mod.ts";
import { MetaTags, MetaTagUrlV√†Document } from "../Code ch·∫°y tr√™n client/URL, HTML/H√†m cho vi·ªác t·∫°o b√†i ƒëƒÉng ho·∫∑c n∆°i ƒëƒÉng t·ª´ URL.ts";

export type CacheUrlCh√≠nhT·∫Øc = Map<string, string>;
export type CacheHTML = Map<UrlCh√≠nhT·∫Øc["href"], string>;

/** Kh√¥ng d√πng h√†m n√†y tr√™n server, v√¨ n√≥ s·∫Ω t·∫°o URL cho CORS proxy tr√™n server. N·∫øu d√πng n√≥ th√¨ URL n√†o g·ª≠i ƒë·∫øn CORS proxy s·∫Ω b·ªã circular */
export async function l·∫•yHTMLT·ª´Local(urL: Url, originC·ªßaCorsProxy: URL["origin"] | undefined = undefined) {
  console.log("üöÄ ~ l·∫•yHTMLT·ª´Local ~ originC·ªßaCorsProxy:", originC·ªßaCorsProxy);
  const url = urL.toString();
  let html;
  if (!originC·ªßaCorsProxy) {
    const cacheHTML = new Map(Object.entries(JSON.parse(await Deno.readTextFile(T·∫¨P_TIN_CACHE_HTML)))) as CacheHTML;
    html = cacheHTML.get(url);
  }

  if (!html || originC·ªßaCorsProxy) {
    const urlCorsProxy = t·∫°oCorsURL(originC·ªßaCorsProxy!);
    urlCorsProxy.search = new URLSearchParams({ url: url.toString() }).toString();
    html = await (await fetch(urlCorsProxy)).text();
  }
  return html;
}

export function l·∫•yURLCh√≠nhT·∫Øc(urL: UrlCh∆∞aCh√≠nhT·∫Øc, html: string): string {
  const url = urL.toString();
  const document = new DOMParser().parseFromString(html, "text/html");
  const canonical = document.querySelector("link[rel='canonical']") as HTMLLinkElement | null;
  return canonical?.getAttribute("href") || url.toString();
}

export async function l·∫•yURLCh√≠nhT·∫ØcV√†HTMLT·ª´Local(urL: Url, HTML: string | undefined = undefined): Promise<[string, string | ""]> {
  const env = await load();
  const url = urL.toString();
  const cacheUrlCh√≠nhT·∫Øc = new Map(Object.entries(JSON.parse(await Deno.readTextFile(T·∫¨P_TIN_CACHE_URL_CH√çNH_T·∫ÆC)))) as CacheHTML;
  let html = HTML;
  let urlCh√≠nhT·∫Øc = cacheUrlCh√≠nhT·∫Øc.get(url);
  if (!urlCh√≠nhT·∫Øc) {
    /** N·∫øu kh√¥ng c√≥ cache cho URL ch√≠nh t·∫Øc th√¨ coi nh∆∞ cache HTML l√† kh√¥ng c√≥ */
    console.info("Kh√¥ng c√≥ s·∫µn cache URL ch√≠nh t·∫Øc cho URL n√†y");
    // html = await l·∫•yHTMLT·ª´Local(url, env["ORIGIN"]);
    html = await l·∫•yHTMLT·ª´Local(url, env["CORS_API"]);
    urlCh√≠nhT·∫Øc = l·∫•yURLCh√≠nhT·∫Øc(url, html);
  }
  console.log("URL ch√≠nh t·∫Øc l·∫•y ƒë∆∞·ª£c:", urlCh√≠nhT·∫Øc);
  const urlCh√≠nhT·∫ØcTh·∫≠t = urlCh√≠nhT·∫Øc !== "https://www.facebook.com/login/web/";
  if (!urlCh√≠nhT·∫ØcTh·∫≠t) {
    console.info("Facebook ch·∫∑n IP n√†y. L·∫•y tr√™n CORS proxy");
    html = await l·∫•yHTMLT·ª´Local(url, env["CORS_API"]);
    urlCh√≠nhT·∫Øc = l·∫•yURLCh√≠nhT·∫Øc(url, html);
  }
  if (!urlCh√≠nhT·∫Øc) {
    console.info("Kh√¥ng t√¨m th·∫•y URL ch√≠nh t·∫Øc. D√πng URL ƒë∆∞·ª£c nh·∫≠p v√†o l√†m URL ch√≠nh t·∫Øc");
    urlCh√≠nhT·∫Øc = url;
  }

  if (urlCh√≠nhT·∫Øc && !html) {
    html = await l·∫•yHTML(urlCh√≠nhT·∫Øc);
  }
  html = html ? html : "";
  return [urlCh√≠nhT·∫Øc, html];
}

export async function t·∫°oCache(): Promise<CacheHTML> {
  const cacheUrlCh√≠nhT·∫Øc: CacheUrlCh√≠nhT·∫Øc = new Map();
  const cacheHTML: CacheHTML = new Map();

  const danhS√°chTh√¥ngTinC·∫•uH√¨nhN∆°iƒêƒÉng = await t·∫°oDanhS√°chTh√¥ngTinC·∫•uH√¨nhN∆°iƒêƒÉng();
  for (const th√¥ngTinC·∫•uH√¨nh of danhS√°chTh√¥ngTinC·∫•uH√¨nhN∆°iƒêƒÉng) {
    if (th√¥ngTinC·∫•uH√¨nh.t√™nC·∫•uH√¨nh === "test") continue;
    const urls = l·∫•yURLTrongJSON(th√¥ngTinC·∫•uH√¨nh.c·∫•uH√¨nh);
    const uniqueUrls = [...new Set(urls)];
    for (const urL of uniqueUrls) {
      const url = urL.href;
      console.log(url);
      const [urlKh√¥ngSlash, urlC√≥Slash] = l·∫•yURLKh√¥ngSlashV√†C√≥Slash(url);
      const [urlCh√≠nhT·∫Øc, html] = await l·∫•yURLCh√≠nhT·∫ØcV√†HTMLT·ª´Local(url);

      cacheUrlCh√≠nhT·∫Øc.set(urlKh√¥ngSlash, urlCh√≠nhT·∫Øc);
      cacheUrlCh√≠nhT·∫Øc.set(urlC√≥Slash, urlCh√≠nhT·∫Øc);
      cacheHTML.set(urlCh√≠nhT·∫Øc, html);
    }
  }
  await Deno.writeTextFile(T·∫¨P_TIN_CACHE_HTML, JSON.stringify(Object.fromEntries(cacheHTML.entries()), null, 2));
  await Deno.writeTextFile(T·∫¨P_TIN_CACHE_URL_CH√çNH_T·∫ÆC, JSON.stringify(Object.fromEntries(cacheUrlCh√≠nhT·∫Øc.entries()), null, 2));
  console.log();
  return cacheHTML;
}

export async function l·∫•yMetaTagV√†T·∫°oDocumentTr√™nLocal(urlString: Url, HTML: string | undefined = undefined): Promise<MetaTagUrlV√†Document> {
  const [url, html] = await l·∫•yURLCh√≠nhT·∫ØcV√†HTMLT·ª´Local(urlString, HTML);
  const meta = await getMetaTags(html) as MetaTags;
  if (!meta?.og) console.warn(`Kh√¥ng l·∫•y ƒë∆∞·ª£c c√°c th·∫ª Open Graph cho ${url}`);
  const document = new DOMParser().parseFromString(html, "text/html");

  return { meta, url: new URL(url), document, html };
}
