import { getMetaTags } from "https://deno.land/x/opengraph@v1.0.0/mod.ts";
import { DOMParser, HTMLDocument } from "jsr:@b-fuze/deno-dom";
import { parse } from "npm:tldts";
import punycode from "npm:punycode";
import * as linkify from "npm:linkifyjs";
import isURL from "npm:validator/lib/isURL.js";
import isEmail from "npm:validator/lib/isEmail.js";

export type MetaTags = {
  /**
   * Defined from HTML specification
   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name
   */
  "application-name"?: string;
  author?: string;
  description?: string;
  generator?: string;
  keywords?: string;
  referrer?: string;
  "theme-color"?: string;
  "color-scheme"?: string;
  viewport?: string;

  // Defined from other specifications
  creator?: string;
  googlebot?: string;
  robots?: string;
  publisher?: string;

  /**
   * Defined from Open Graph
   * @see https://ogp.me/
   */
  og?: OpenGraphTags;
  article: {
    publish_time: string;
    modified_time: string;
    expiration_time: string;
    author: string;
    section: string;
    tag: string;
  };
  book: {
    author: string;
    isbn: string;
    release_date: string;
    tag: string;
  };
  profile: {
    first_name: string;
    last_name: string;
    username: string;
    gender: string;
  };

  [extraKeys: string]: unknown;
};
export type OpenGraphTags = {
  title?: string;
  type?: string;
  description?: string;
  site_name?: string;
  locale?: string | { alternate?: string; content: string };
  image?:
    | string
    | {
      url?: string;
      secure_url?: string;
      type?: string;
      width?: string;
      height?: string;
      alt?: string;
      content: string;
    };
  url?: string;
  determiner?: string;
  [extraKeys: string]: unknown;
};

export interface MetaTagUrlV√†Document {
  meta: MetaTags;
  url: URL;
  document: HTMLDocument;
}

export type UrlStringCh∆∞aCh√≠nhT·∫Øc = string | URL;
export type UrlStringCh√≠nhT·∫Øc = URL;

export async function l·∫•yMetaTagV√†T·∫°oDocument(
  urlString: UrlStringCh∆∞aCh√≠nhT·∫Øc | UrlStringCh√≠nhT·∫Øc,
  HTML: string | undefined = undefined,
): Promise<MetaTagUrlV√†Document> {
  const url = await l·∫•yURLCh√≠nhT·∫Øc(urlString, HTML);
  const html = HTML ? HTML : await l·∫•yHTML(url);
  const meta = await getMetaTags(html) as MetaTags;
  if (!meta?.og) console.warn(`Kh√¥ng l·∫•y ƒë∆∞·ª£c c√°c th·∫ª Open Graph cho ${url.href}`);
  const document = new DOMParser().parseFromString(html, "text/html");

  return { meta, url, document };
}

export function l·∫•yUsername(hostname: string) {
  const { domainWithoutSuffix, subdomain } = parse(punycode.toUnicode(hostname));
  const platforms = ["deno", "wordpress", "medium", "tumplr", "wix", "blogger", "substack"];
  if (platforms.includes(domainWithoutSuffix)) return subdomain;
  return domainWithoutSuffix;
}

export function l·∫•yTitle({ meta, url, document }: MetaTagUrlV√†Document): string {
  const title = document.querySelector("title")?.textContent || meta.og?.title;
  if (!title) return "";
  const titleSplit = title.split(" | ");
  titleSplit.pop();
  return titleSplit.join(" | ") || title;
}

export function l·∫•yM√¥T·∫£({ meta, document }: MetaTagUrlV√†Document): string | null | undefined {
  return meta?.description || document.querySelector("p")?.textContent || meta.og?.description;
}

/**
 * @param ƒë·ªÉD·∫•uC√°chTrongLi√™nK·∫øt m·∫∑c ƒë·ªãnh l√† false ƒë·ªÉ t·∫°o markdown cho d·ªÖ
 */
export function x·ª≠L√ΩPunycode(
  encodedUrl: UrlStringCh∆∞aCh√≠nhT·∫Øc | undefined,
  ƒë·ªÉD·∫•uC√°chTrongLi√™nK·∫øt: boolean = false,
): string | undefined {
  if (!encodedUrl) return undefined;
  const decodedUri = decodeURI(encodedUrl.toString());
  const hostname = (new URL(encodedUrl)).hostname;
  const decodedHostname = punycode.toUnicode(hostname);
  const decodedString = decodedUri.toString().replace(hostname, decodedHostname);

  if (ƒë·ªÉD·∫•uC√°chTrongLi√™nK·∫øt) return decodedString;
  return decodedString.replaceAll(" ", "%20");
}

export async function l·∫•yURLCh√≠nhT·∫Øc(urlString: UrlStringCh∆∞aCh√≠nhT·∫Øc | UrlStringCh√≠nhT·∫Øc, HTML: string | undefined = undefined): Promise<URL> {
  const html = HTML ? HTML : await l·∫•yHTML(urlString);
  const document = new DOMParser().parseFromString(html, "text/html");
  const canonical = document.querySelector("link[rel='canonical']") as HTMLLinkElement | null;
  return new URL(canonical?.getAttribute("href") || urlString);
}

export function t·∫°oUrlCorsProxy(urlNg∆∞·ªùiD√πngNh·∫≠p: URL["href"], origin: URL["origin"] = globalThis.location.origin) {
  const urlCorsProxy = new URL(`${origin}/api/cors-proxy/`);
  urlCorsProxy.search = new URLSearchParams({ url: urlNg∆∞·ªùiD√πngNh·∫≠p });
  return urlCorsProxy;
}

/**
 * N·∫øu chu·ªói ch·ªâ ho√†n to√†n c√≥ URL th√¨ tr·∫£ v·ªÅ [url, url]. C√≤n n·∫øu c√≥ th√¨ ph·∫ßn t·ª≠ ƒë·∫ßu l√† nh·ªØng ch·ªØ c√≤n l·∫°i sau khi loc url. Vi·ªác n√†y l√† ƒë·ªÉ khi ng∆∞·ªùi d√πng ch·ªâ nh·∫≠p ƒë√∫ng url m√† kh√¥ng nh·∫≠p g√¨ kh√°c th√¨ d√πng url n√†y l√†m t√™n n∆°i ƒëƒÉng lu√¥n cho ti·ªán
 */
export async function t√°chUrlHo·∫∑cEmailƒê·∫ßuTi√™nTrongChu·ªói(chu·ªói: string): Promise<[string, string | undefined]> {
  if (!chu·ªói) return ["", ""];
  let chu·ªóiƒê∆∞·ª£cL·ªçc = chu·ªói;
  let urlHo·∫∑cEmail = undefined;
  const urls = linkify.find(chu·ªói);
  if (urls.length > 0) {
    const { href, type } = urls[0];
    chu·ªóiƒê∆∞·ª£cL·ªçc = chu·ªói.replace(href, "").trim();
    urlHo·∫∑cEmail = type === "email" ? href : (await l·∫•yURLCh√≠nhT·∫Øc(href)).href;
    if (chu·ªóiƒê∆∞·ª£cL·ªçc === "") chu·ªóiƒê∆∞·ª£cL·ªçc = urlHo·∫∑cEmail;
  }
  return [chu·ªóiƒê∆∞·ª£cL·ªçc, urlHo·∫∑cEmail];
}

/**
 * Slash is possible to add to the end of url in following cases:
 * - There is no slash standing as last symbol of URL.
 * - There is no file extension (or there is no dot inside the last section of the path).
 * - There is no parameter (even empty one ‚Äî a single ? at the end of URL).
 * - There is no link to a fragment (even empty one ‚Äî a single # mark at the end of URL).
 */
function appendSlashToUrlIfIsPossible(url: UrlStringCh∆∞aCh√≠nhT·∫Øc) {
  /** Removing empty parameter or fragment so the URL will always have slash if possible */
  const urlWithNoEmptyParameterOrFragment = url.toString().replace(/#$/g, "").replace(/\?$/g, "");

  const parsedUrl = new URL(urlWithNoEmptyParameterOrFragment);

  /** There are directories with dots in the last section of the path, so we can only hope that the file extension being in used (if any) is a common one */
  const noFileExtension = !/\.(htm|html|jpg|png|gif|pdf|php|doc|docx)$/.test(parsedUrl.pathname);

  const noParameter = !parsedUrl.search;
  const noLinkToFragment = !parsedUrl.hash;

  /** All checks above cannot guarantee that there is no '?' or '#' symbol at the end of URL. It is required to be checked manually */
  const noTrailingSlashAlready = !/\/$/.test(parsedUrl.href);

  const slashAppendingIsPossible = noFileExtension && noParameter && noLinkToFragment && noTrailingSlashAlready;
  return slashAppendingIsPossible ? `${parsedUrl.href}/` : parsedUrl.href;
}

export async function l·∫•yHTML(urlString: UrlStringCh∆∞aCh√≠nhT·∫Øc | UrlStringCh√≠nhT·∫Øc) {
  return await (await fetch(urlString)).text();
}

export function l·∫•yURLTrongJSON(v·∫≠tTh·ªÉ: Record<any, any>) {
  /**
   * C·∫ßn ƒë·ªÉ `JSON.stringify(v·∫≠tTh·ªÉ, null, 2)` ch·ª© kh√¥ng ƒë·ªÉ `JSON.stringify(v·∫≠tTh·ªÉ)` ƒë∆∞·ª£c
   *  @see https://github.com/Hypercontext/linkifyjs/discussions/480
   */
  return linkify.find(JSON.stringify(v·∫≠tTh·ªÉ, null, 2)).filter((i) => isURL(i.href));
}

export function l·∫•yEmailTrongJSON(v·∫≠tTh·ªÉ: Record<any, any>) {
  /**
   * C·∫ßn ƒë·ªÉ `JSON.stringify(v·∫≠tTh·ªÉ, null, 2)` ch·ª© kh√¥ng ƒë·ªÉ `JSON.stringify(v·∫≠tTh·ªÉ)` ƒë∆∞·ª£c
   *  @see https://github.com/Hypercontext/linkifyjs/discussions/480
   */
  return linkify.find(JSON.stringify(v·∫≠tTh·ªÉ, null, 2)).filter((i) => isEmail(i.href));
}
type UrlStringƒê√£X·ª≠L√ΩSlashV√†Ch∆∞aCanonical = string;
export function x·ª≠L√ΩSlash(urlString: UrlStringCh∆∞aCh√≠nhT·∫Øc, debug = ""): UrlStringƒê√£X·ª≠L√ΩSlashV√†Ch∆∞aCanonical {
  const url = new URL(urlString);
  const danhS√°chHostnameKh√¥ngTh√™mSlashƒê∆∞·ª£c = ["discord.gg"];
  if (url.href === "https://discord.gg/jWTk4EHFK2") {
    console.log(
      // "üöÄ x·ª≠L√ΩSlash",
      debug,
      url.href,
      danhS√°chHostnameKh√¥ngTh√™mSlashƒê∆∞·ª£c.includes(url.hostname),
    );
  }
  return danhS√°chHostnameKh√¥ngTh√™mSlashƒê∆∞·ª£c.includes(url.hostname) ? url.href : new URL(appendSlashToUrlIfIsPossible(url.href)).href;
}
